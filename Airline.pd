//*******************************************************
//* File:    /Airline.pd
//* Author:  UP696771
//* License: See /License.txt
//* Assumptions: See /Assumptions.txt
//*******************************************************

class Airline ^=
abstract
	var
		pilots : set of Pilot,
		flights : seq of Flight,
		aircraft : set of Aircraft;
		
	invariant
		#aircraft > 0, // ASSUMPTION: Airlines need at least one aircraft to operate
		#pilots > 0, // ASSUMPTION: Airlines need at least one pilot to operate
		forall p::pilots :- exists a::aircraft :- a in p.flyables, // ASSUMPTION: A pilot cannot work for an airline without being able to fly at least one of its plane types
		forall f::flights :- f.aircraft in aircraft,
		
		// No two (different) flights may share the same code
		forall f::flights :- forall o::flights :- (
			[f = o]: true,
			[]: f.code ~= o.code
		),
		
		forall p::pilots :- (
			let pflights ^= those f::flights :- f.pilot = p;
			(those x::pflights :- #(those y::pflights :- x.date = y.date) <= 2) = pflights
		);
interface
	schema! addFlight(flight:Flight)
		pre
			flight ~in flights,
			(
				[flight.pilot = null]: true,
				[]: (flight.pilot is Pilot) in pilots
			),
			flight.aircraft in aircraft,
			forall f::flights :- flight.code ~= f.code,
			(
				[flight.pilot = null]: true,
				[]: (
					let fp ^= (flight.pilot is Pilot);
					let pflights ^= (those f::flights :- f.pilot = fp).append(flight);
					(those x::pflights :- #(those y::pflights :- x.date = y.date) <= 2) = pflights
				)
			)
		post flights! = flights.append(flight)
		assert flight in flights';

	function flightsToAirport(airport:Airport): seq of Flight
		^= those f::flights :- f.route.y = airport;

	function flightsFromAirport(airport:Airport): seq of Flight
		^= those f::flights :- f.route.x = airport;
		
	function fullFlights:seq of Flight
		^= those f::flights :- f.isFull;
		
	build{!pilots:set of Pilot, !aircraft:set of Aircraft}
		pre
			#aircraft > 0,
			#pilots > 0,
			forall p::pilots :- exists a::aircraft :- a in p.flyables
		post flights! = seq of Flight{};
end;