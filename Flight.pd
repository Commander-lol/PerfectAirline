//*******************************************************
//* File:    /Flight.pd
//* Author:  UP696771
//* License: See /License.txt
//* Assumptions: See /Assumptions.txt
//*******************************************************
class Flight ^=
abstract
	var
		code : string,
		date : Date,
		aircraft : Aircraft,
		route : Route,
		pilot: Pilot || void,
		passengers : set of Passenger,
		distance: nat; // ASSUMPTION: Flight in whole number of miles
		
	invariant
		#code = 8, // ASSUMPTION: "8 character flight code" means any string character is valid
		route.x ~= route.y, // ASSUMPTION: No circular routes
		(
			[pilot ~= null]: aircraft in (pilot is Pilot).flyables,
			[]: true
		),
		~(exists x::passengers, y::passengers :- x~=y & x.uid = y.uid), // ASSUMPTION: Airline only allows people to buy one ticket/flight
		#passengers <= aircraft.capacity;
		
		
	ghost const 
		das ^= Aircraft{"das", 300},
		dsa ^= Aircraft{"dsa", 250},
		rsp ^= Aircraft{"rsp", 3},
		
		lax ^= Airport{"LAX"},
		edn ^= Airport{"EDN"},
		
		frank ^= Pilot{"FrankyBoi", set of Aircraft{das, dsa, rsp}},
		basil ^= Pilot{"ItsBasilThyme", set of Aircraft{dsa}},
		
		reallySmallFlight ^= Flight{"abababab", 123, 1200, rsp, frank, Route{lax, edn}},
		franksGreatFlight ^= Flight{"babababa", 365, 2500, dsa, frank, Route{edn, lax}};
		
interface
	ghost schema! fillFlight
		pre aircraft.capacity - #passengers >= 3
		post passengers! = passengers.append(Passenger{"1SD45B"}).append(Passenger{"1SD48J"}).append(Passenger{"1ST8MQ"});
	
	property assert (self after it!setPilot(null)).pilot = null;
	property assert (reallySmallFlight after it!fillFlight).isFull; 
	property assert (franksGreatFlight after it!setPilot(basil)).pilot = basil;
	
	schema! addPassenger(passenger:Passenger)
		pre 
			passenger ~in passengers,
			~(exists x::passengers :- x~=passenger & x.uid = passenger.uid),
			~isFull
		post passengers! = passengers.append(passenger)
		assert passenger in passengers';

	schema! setPilot(newPilot:Pilot || void)
		pre (
			[newPilot ~= null]: aircraft in (newPilot is Pilot).flyables,
			[]: true
		)
		post pilot! = newPilot
		assert pilot' = newPilot;

	function
		code,
		date,
		aircraft,
		route,
		pilot,
		distance,
		passengers;
		
	function origin:Airport
		^= route.x;
		
	function destination:Airport
		^= route.y;
		
	function numOfPassengers:nat
		^= #passengers;
	
	function isFull:bool
		^= #passengers = aircraft.capacity;
		
	build{!code:string, !date:Date, !distance: nat, !aircraft:Aircraft, !pilot:Pilot||void, !route:Route}
		pre
			#code = 8,
			route.x ~= route.y,
			(
				[pilot ~= null]: aircraft in (pilot is Pilot).flyables,
				[]: true
			)
		post passengers! = set of Passenger{};
end;